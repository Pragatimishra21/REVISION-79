/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
  ListNode *reverse(ListNode* head, int k)
  {
       ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* nextp = NULL;
        int count = 0;
        ListNode* temp = head;
        while(temp!=NULL && count<k)
        {
            count++;
            temp = temp->next;
        }
        if(count<k) return head;
        count = 0;
        temp = head;
        while(temp!=NULL && count<k)
        {
           nextp = curr->next;
           curr->next = prev;
           prev = curr;
           curr = nextp;
           count++;
        }
        if(nextp !=NULL)
        head->next = reverse(nextp,k);
        return prev;
  }


    ListNode* reverseKGroup(ListNode* head, int k) {
        return reverse(head,k);
    }
};
