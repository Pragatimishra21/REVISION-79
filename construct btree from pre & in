/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        map<int,int> mpp;
        for(int i=0 ; i<inorder.size() ; i++)
        {
            mpp[inorder[i]] = i;
        }
        TreeNode*root = help(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,mpp);
        return root;
    }

   TreeNode* help(vector<int>& preorder, int ps, int pe ,vector<int>& inorder , int is , int ie , map<int,int> mpp)
   {
       if(ps>pe || is>ie) return NULL;
       TreeNode *root = new TreeNode(preorder[ps]);

       int inroot = mpp[preorder[ps]];
       int leftnum = inroot - is;

       root->left = help(preorder,ps+1,ps+leftnum,inorder,is,is+inroot,mpp);
       root->right = help(preorder,ps+leftnum+1,pe,inorder,inroot+1,ie,mpp);
       return root;
   } 
};
